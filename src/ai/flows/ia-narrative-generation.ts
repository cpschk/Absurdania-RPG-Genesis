// use server'
'use server';

/**
 * @fileOverview Generates a unique and unpredictable narrative using AI.
 *
 * - generateNarrative - A function that generates the narrative.
 * - GenerateNarrativeInput - The input type for the generateNarrative function.
 * - GenerateNarrativeOutput - The return type for the generateNarrative function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const GenerateNarrativeInputSchema = z.object({
  playerDecision: z
    .string()
    .describe('The player\'s decision that influences the narrative.'),
  currentScene: z.string().describe('The current scene description.'),
});
export type GenerateNarrativeInput = z.infer<typeof GenerateNarrativeInputSchema>;

const GenerateNarrativeOutputSchema = z.object({
  newScene: z.string().describe('The new scene generated by the AI.'),
});
export type GenerateNarrativeOutput = z.infer<typeof GenerateNarrativeOutputSchema>;

export async function generateNarrative(input: GenerateNarrativeInput): Promise<GenerateNarrativeOutput> {
  return generateNarrativeFlow(input);
}

const prompt = ai.definePrompt({
  name: 'generateNarrativePrompt',
  input: {schema: GenerateNarrativeInputSchema},
  output: {schema: GenerateNarrativeOutputSchema},
  prompt: `You are an AI narrative generator for the Absurdania RPG. The player has made a decision that has led to the following current scene:

  Current Scene: {{{currentScene}}}
  Player Decision: {{{playerDecision}}}

  Generate the next scene based on the player's decision. The scene should continue the story in an unpredictable and engaging way, maintaining the absurd and fantastical aesthetics of Absurdania RPG.
  Format your response as a single paragraph describing the new scene, suitable for direct use in the game.
  `,
});

const generateNarrativeFlow = ai.defineFlow(
  {
    name: 'generateNarrativeFlow',
    inputSchema: GenerateNarrativeInputSchema,
    outputSchema: GenerateNarrativeOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
